{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport ReadOnlyCharacterData from './ReadOnlyCharacterData';\nimport ReadOnlyNode from './ReadOnlyNode';\nvar ReadOnlyText = function (_ReadOnlyCharacterDat) {\n  _inherits(ReadOnlyText, _ReadOnlyCharacterDat);\n  var _super = _createSuper(ReadOnlyText);\n  function ReadOnlyText() {\n    _classCallCheck(this, ReadOnlyText);\n    return _super.apply(this, arguments);\n  }\n  _createClass(ReadOnlyText, [{\n    key: \"nodeName\",\n    get: function get() {\n      return '#text';\n    }\n  }, {\n    key: \"nodeType\",\n    get: function get() {\n      return ReadOnlyNode.TEXT_NODE;\n    }\n  }]);\n  return ReadOnlyText;\n}(ReadOnlyCharacterData);\nexport { ReadOnlyText as default };","map":{"version":3,"names":["ReadOnlyCharacterData","ReadOnlyNode","ReadOnlyText","_ReadOnlyCharacterDat","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","get","TEXT_NODE","default"],"sources":["C:/Users/NIR67/OneDrive/שולחן העבודה/SmokEye/node_modules/react-native/Libraries/DOM/Nodes/ReadOnlyText.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n// flowlint unsafe-getters-setters:off\n\nimport ReadOnlyCharacterData from './ReadOnlyCharacterData';\nimport ReadOnlyNode from './ReadOnlyNode';\n\nexport default class ReadOnlyText extends ReadOnlyCharacterData {\n  /**\n   * @override\n   */\n  get nodeName(): string {\n    return '#text';\n  }\n\n  /**\n   * @override\n   */\n  get nodeType(): number {\n    return ReadOnlyNode.TEXT_NODE;\n  }\n}\n"],"mappings":";;;;;;;AAYA,OAAOA,qBAAqB,MAAM,yBAAyB;AAC3D,OAAOC,YAAY,MAAM,gBAAgB;AAAC,IAErBC,YAAY,aAAAC,qBAAA;EAAAC,SAAA,CAAAF,YAAA,EAAAC,qBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,YAAA;EAAA,SAAAA,aAAA;IAAAK,eAAA,OAAAL,YAAA;IAAA,OAAAG,MAAA,CAAAG,KAAA,OAAAC,SAAA;EAAA;EAAAC,YAAA,CAAAR,YAAA;IAAAS,GAAA;IAAAC,GAAA,EAI/B,SAAAA,IAAA,EAAuB;MACrB,OAAO,OAAO;IAChB;EAAC;IAAAD,GAAA;IAAAC,GAAA,EAKD,SAAAA,IAAA,EAAuB;MACrB,OAAOX,YAAY,CAACY,SAAS;IAC/B;EAAC;EAAA,OAAAX,YAAA;AAAA,EAbuCF,qBAAqB;AAAA,SAA1CE,YAAY,IAAAY,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}