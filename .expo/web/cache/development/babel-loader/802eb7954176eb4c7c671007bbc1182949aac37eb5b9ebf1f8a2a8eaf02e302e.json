{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { findNodeHandle } from '../../ReactNative/RendererProxy';\nimport { AnimatedEvent } from '../AnimatedEvent';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nimport AnimatedNode from './AnimatedNode';\nimport AnimatedObject, { hasAnimatedNode } from './AnimatedObject';\nimport AnimatedStyle from './AnimatedStyle';\nimport invariant from 'invariant';\nfunction createAnimatedProps(inputProps) {\n  var props = {};\n  for (var key in inputProps) {\n    var value = inputProps[key];\n    if (key === 'style') {\n      props[key] = new AnimatedStyle(value);\n    } else if (value instanceof AnimatedNode) {\n      props[key] = value;\n    } else if (hasAnimatedNode(value)) {\n      props[key] = new AnimatedObject(value);\n    } else {\n      props[key] = value;\n    }\n  }\n  return props;\n}\nvar AnimatedProps = function (_AnimatedNode) {\n  _inherits(AnimatedProps, _AnimatedNode);\n  var _super = _createSuper(AnimatedProps);\n  function AnimatedProps(props, callback) {\n    var _this;\n    _classCallCheck(this, AnimatedProps);\n    _this = _super.call(this);\n    _this._props = createAnimatedProps(props);\n    _this._callback = callback;\n    return _this;\n  }\n  _createClass(AnimatedProps, [{\n    key: \"__getValue\",\n    value: function __getValue() {\n      var props = {};\n      for (var key in this._props) {\n        var value = this._props[key];\n        if (value instanceof AnimatedNode) {\n          props[key] = value.__getValue();\n        } else if (value instanceof AnimatedEvent) {\n          props[key] = value.__getHandler();\n        } else {\n          props[key] = value;\n        }\n      }\n      return props;\n    }\n  }, {\n    key: \"__getAnimatedValue\",\n    value: function __getAnimatedValue() {\n      var props = {};\n      for (var key in this._props) {\n        var value = this._props[key];\n        if (value instanceof AnimatedNode) {\n          props[key] = value.__getAnimatedValue();\n        }\n      }\n      return props;\n    }\n  }, {\n    key: \"__attach\",\n    value: function __attach() {\n      for (var key in this._props) {\n        var value = this._props[key];\n        if (value instanceof AnimatedNode) {\n          value.__addChild(this);\n        }\n      }\n    }\n  }, {\n    key: \"__detach\",\n    value: function __detach() {\n      if (this.__isNative && this._animatedView) {\n        this.__disconnectAnimatedView();\n      }\n      for (var key in this._props) {\n        var value = this._props[key];\n        if (value instanceof AnimatedNode) {\n          value.__removeChild(this);\n        }\n      }\n      _get(_getPrototypeOf(AnimatedProps.prototype), \"__detach\", this).call(this);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this._callback();\n    }\n  }, {\n    key: \"__makeNative\",\n    value: function __makeNative(platformConfig) {\n      for (var key in this._props) {\n        var value = this._props[key];\n        if (value instanceof AnimatedNode) {\n          value.__makeNative(platformConfig);\n        }\n      }\n      if (!this.__isNative) {\n        this.__isNative = true;\n        _get(_getPrototypeOf(AnimatedProps.prototype), \"__setPlatformConfig\", this).call(this, platformConfig);\n        if (this._animatedView) {\n          this.__connectAnimatedView();\n        }\n      }\n    }\n  }, {\n    key: \"setNativeView\",\n    value: function setNativeView(animatedView) {\n      if (this._animatedView === animatedView) {\n        return;\n      }\n      this._animatedView = animatedView;\n      if (this.__isNative) {\n        this.__connectAnimatedView();\n      }\n    }\n  }, {\n    key: \"__connectAnimatedView\",\n    value: function __connectAnimatedView() {\n      invariant(this.__isNative, 'Expected node to be marked as \"native\"');\n      var nativeViewTag = findNodeHandle(this._animatedView);\n      invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');\n      NativeAnimatedHelper.API.connectAnimatedNodeToView(this.__getNativeTag(), nativeViewTag);\n    }\n  }, {\n    key: \"__disconnectAnimatedView\",\n    value: function __disconnectAnimatedView() {\n      invariant(this.__isNative, 'Expected node to be marked as \"native\"');\n      var nativeViewTag = findNodeHandle(this._animatedView);\n      invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');\n      NativeAnimatedHelper.API.disconnectAnimatedNodeFromView(this.__getNativeTag(), nativeViewTag);\n    }\n  }, {\n    key: \"__restoreDefaultValues\",\n    value: function __restoreDefaultValues() {\n      if (this.__isNative) {\n        NativeAnimatedHelper.API.restoreDefaultValues(this.__getNativeTag());\n      }\n    }\n  }, {\n    key: \"__getNativeConfig\",\n    value: function __getNativeConfig() {\n      var propsConfig = {};\n      for (var propKey in this._props) {\n        var value = this._props[propKey];\n        if (value instanceof AnimatedNode) {\n          value.__makeNative(this.__getPlatformConfig());\n          propsConfig[propKey] = value.__getNativeTag();\n        }\n      }\n      return {\n        type: 'props',\n        props: propsConfig\n      };\n    }\n  }]);\n  return AnimatedProps;\n}(AnimatedNode);\nexport { AnimatedProps as default };","map":{"version":3,"names":["_classCallCheck","_createClass","_get","_inherits","_possibleConstructorReturn","_getPrototypeOf","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","findNodeHandle","AnimatedEvent","NativeAnimatedHelper","AnimatedNode","AnimatedObject","hasAnimatedNode","AnimatedStyle","invariant","createAnimatedProps","inputProps","props","key","value","AnimatedProps","_AnimatedNode","_super","callback","_this","_props","_callback","__getValue","__getHandler","__getAnimatedValue","__attach","__addChild","__detach","__isNative","_animatedView","__disconnectAnimatedView","__removeChild","update","__makeNative","platformConfig","__connectAnimatedView","setNativeView","animatedView","nativeViewTag","API","connectAnimatedNodeToView","__getNativeTag","disconnectAnimatedNodeFromView","__restoreDefaultValues","restoreDefaultValues","__getNativeConfig","propsConfig","propKey","__getPlatformConfig","type","default"],"sources":["C:/Users/NIR67/OneDrive/שולחן העבודה/SmokEye/node_modules/react-native/Libraries/Animated/nodes/AnimatedProps.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport type {PlatformConfig} from '../AnimatedPlatformConfig';\n\nimport {findNodeHandle} from '../../ReactNative/RendererProxy';\nimport {AnimatedEvent} from '../AnimatedEvent';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nimport AnimatedNode from './AnimatedNode';\nimport AnimatedObject, {hasAnimatedNode} from './AnimatedObject';\nimport AnimatedStyle from './AnimatedStyle';\nimport invariant from 'invariant';\n\nfunction createAnimatedProps(inputProps: Object): Object {\n  const props: Object = {};\n  for (const key in inputProps) {\n    const value = inputProps[key];\n    if (key === 'style') {\n      props[key] = new AnimatedStyle(value);\n    } else if (value instanceof AnimatedNode) {\n      props[key] = value;\n    } else if (hasAnimatedNode(value)) {\n      props[key] = new AnimatedObject(value);\n    } else {\n      props[key] = value;\n    }\n  }\n  return props;\n}\n\nexport default class AnimatedProps extends AnimatedNode {\n  _props: Object;\n  _animatedView: any;\n  _callback: () => void;\n\n  constructor(props: Object, callback: () => void) {\n    super();\n    this._props = createAnimatedProps(props);\n    this._callback = callback;\n  }\n\n  __getValue(): Object {\n    const props: {[string]: any | ((...args: any) => void)} = {};\n    for (const key in this._props) {\n      const value = this._props[key];\n      if (value instanceof AnimatedNode) {\n        props[key] = value.__getValue();\n      } else if (value instanceof AnimatedEvent) {\n        props[key] = value.__getHandler();\n      } else {\n        props[key] = value;\n      }\n    }\n\n    return props;\n  }\n\n  __getAnimatedValue(): Object {\n    const props: {[string]: any} = {};\n    for (const key in this._props) {\n      const value = this._props[key];\n      if (value instanceof AnimatedNode) {\n        props[key] = value.__getAnimatedValue();\n      }\n    }\n    return props;\n  }\n\n  __attach(): void {\n    for (const key in this._props) {\n      const value = this._props[key];\n      if (value instanceof AnimatedNode) {\n        value.__addChild(this);\n      }\n    }\n  }\n\n  __detach(): void {\n    if (this.__isNative && this._animatedView) {\n      this.__disconnectAnimatedView();\n    }\n    for (const key in this._props) {\n      const value = this._props[key];\n      if (value instanceof AnimatedNode) {\n        value.__removeChild(this);\n      }\n    }\n    super.__detach();\n  }\n\n  update(): void {\n    this._callback();\n  }\n\n  __makeNative(platformConfig: ?PlatformConfig): void {\n    for (const key in this._props) {\n      const value = this._props[key];\n      if (value instanceof AnimatedNode) {\n        value.__makeNative(platformConfig);\n      }\n    }\n\n    if (!this.__isNative) {\n      this.__isNative = true;\n\n      // Since this does not call the super.__makeNative, we need to store the\n      // supplied platformConfig here, before calling __connectAnimatedView\n      // where it will be needed to traverse the graph of attached values.\n      super.__setPlatformConfig(platformConfig);\n\n      if (this._animatedView) {\n        this.__connectAnimatedView();\n      }\n    }\n  }\n\n  setNativeView(animatedView: any): void {\n    if (this._animatedView === animatedView) {\n      return;\n    }\n    this._animatedView = animatedView;\n    if (this.__isNative) {\n      this.__connectAnimatedView();\n    }\n  }\n\n  __connectAnimatedView(): void {\n    invariant(this.__isNative, 'Expected node to be marked as \"native\"');\n    const nativeViewTag: ?number = findNodeHandle(this._animatedView);\n    invariant(\n      nativeViewTag != null,\n      'Unable to locate attached view in the native tree',\n    );\n    NativeAnimatedHelper.API.connectAnimatedNodeToView(\n      this.__getNativeTag(),\n      nativeViewTag,\n    );\n  }\n\n  __disconnectAnimatedView(): void {\n    invariant(this.__isNative, 'Expected node to be marked as \"native\"');\n    const nativeViewTag: ?number = findNodeHandle(this._animatedView);\n    invariant(\n      nativeViewTag != null,\n      'Unable to locate attached view in the native tree',\n    );\n    NativeAnimatedHelper.API.disconnectAnimatedNodeFromView(\n      this.__getNativeTag(),\n      nativeViewTag,\n    );\n  }\n\n  __restoreDefaultValues(): void {\n    // When using the native driver, view properties need to be restored to\n    // their default values manually since react no longer tracks them. This\n    // is needed to handle cases where a prop driven by native animated is removed\n    // after having been changed natively by an animation.\n    if (this.__isNative) {\n      NativeAnimatedHelper.API.restoreDefaultValues(this.__getNativeTag());\n    }\n  }\n\n  __getNativeConfig(): Object {\n    const propsConfig: {[string]: number} = {};\n    for (const propKey in this._props) {\n      const value = this._props[propKey];\n      if (value instanceof AnimatedNode) {\n        value.__makeNative(this.__getPlatformConfig());\n        propsConfig[propKey] = value.__getNativeTag();\n      }\n    }\n    return {\n      type: 'props',\n      props: propsConfig,\n    };\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}