{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\NIR67\\\\OneDrive\\\\\\u05E9\\u05D5\\u05DC\\u05D7\\u05DF \\u05D4\\u05E2\\u05D1\\u05D5\\u05D3\\u05D4\\\\SmokEye\\\\src\\\\Screens\\\\PushNotification.jsx\";\nimport { useState, useEffect, useRef } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport * as Device from \"expo-device\";\nimport * as Notifications from \"expo-notifications\";\nimport Constants from \"expo-constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nNotifications.setNotificationHandler({\n  handleNotification: function () {\n    var _handleNotification = _asyncToGenerator(function* () {\n      return {\n        shouldShowAlert: true,\n        shouldPlaySound: false,\n        shouldSetBadge: false\n      };\n    });\n    function handleNotification() {\n      return _handleNotification.apply(this, arguments);\n    }\n    return handleNotification;\n  }()\n});\nfunction sendPushNotification(_x) {\n  return _sendPushNotification.apply(this, arguments);\n}\nfunction _sendPushNotification() {\n  _sendPushNotification = _asyncToGenerator(function* (expoPushToken) {\n    var message = {\n      to: expoPushToken,\n      sound: \"default\",\n      title: \"Original Title\",\n      body: \"And here is the body!\",\n      data: {\n        someData: \"goes here\"\n      }\n    };\n    yield fetch(\"https://exp.host/--/api/v2/push/send\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Accept-encoding\": \"gzip, deflate\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(message)\n    });\n  });\n  return _sendPushNotification.apply(this, arguments);\n}\nfunction registerForPushNotificationsAsync() {\n  return _registerForPushNotificationsAsync.apply(this, arguments);\n}\nfunction _registerForPushNotificationsAsync() {\n  _registerForPushNotificationsAsync = _asyncToGenerator(function* () {\n    var token;\n    if (Device.isDevice) {\n      var _yield$Notifications$ = yield Notifications.getPermissionsAsync(),\n        existingStatus = _yield$Notifications$.status;\n      var finalStatus = existingStatus;\n      if (existingStatus !== \"granted\") {\n        var _yield$Notifications$2 = yield Notifications.requestPermissionsAsync(),\n          status = _yield$Notifications$2.status;\n        finalStatus = status;\n      }\n      if (finalStatus !== \"granted\") {\n        alert(\"Failed to get push token for push notification!\");\n        return;\n      }\n      token = yield Notifications.getExpoPushTokenAsync({\n        projectId: Constants.expoConfig.extra.eas.projectId\n      });\n      console.log(token);\n    } else {\n      alert(\"Must use physical device for Push Notifications\");\n    }\n    if (Platform.OS === \"android\") {\n      Notifications.setNotificationChannelAsync(\"default\", {\n        name: \"default\",\n        importance: Notifications.AndroidImportance.MAX,\n        vibrationPattern: [0, 250, 250, 250],\n        lightColor: \"#FF231F7C\"\n      });\n    }\n    return token;\n  });\n  return _registerForPushNotificationsAsync.apply(this, arguments);\n}\nexport default function App() {\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    expoPushToken = _useState2[0],\n    setExpoPushToken = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    notification = _useState4[0],\n    setNotification = _useState4[1];\n  var notificationListener = useRef();\n  var responseListener = useRef();\n  useEffect(function () {\n    registerForPushNotificationsAsync().then(function (token) {\n      return setExpoPushToken(token);\n    });\n    notificationListener.current = Notifications.addNotificationReceivedListener(function (notification) {\n      setNotification(notification);\n    });\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(function (response) {\n      console.log(response);\n    });\n    return function () {\n      Notifications.removeNotificationSubscription(notificationListener.current);\n      Notifications.removeNotificationSubscription(responseListener.current);\n    };\n  }, []);\n  return _jsxDEV(View, {\n    style: {\n      flex: 1,\n      alignItems: \"center\",\n      justifyContent: \"space-around\"\n    },\n    children: [_jsxDEV(Text, {\n      children: [\"Your expo push token: \", expoPushToken.data]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), _jsxDEV(View, {\n      style: {\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      },\n      children: [_jsxDEV(Text, {\n        children: [\"Title: \", notification && notification.request.content.title, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), _jsxDEV(Text, {\n        children: [\"Body: \", notification && notification.request.content.body]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), _jsxDEV(Text, {\n        children: [\"Data:\", \" \", notification && JSON.stringify(notification.request.content.data)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), _jsxDEV(Button, {\n      title: \"Press to Send Notification\",\n      onPress: _asyncToGenerator(function* () {\n        yield sendPushNotification(expoPushToken.data);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"names":["useState","useEffect","useRef","Text","View","Button","Platform","Device","Notifications","Constants","jsxDEV","_jsxDEV","setNotificationHandler","handleNotification","_handleNotification","_asyncToGenerator","shouldShowAlert","shouldPlaySound","shouldSetBadge","apply","arguments","sendPushNotification","_x","_sendPushNotification","expoPushToken","message","to","sound","title","body","data","someData","fetch","method","headers","Accept","JSON","stringify","registerForPushNotificationsAsync","_registerForPushNotificationsAsync","token","isDevice","_yield$Notifications$","getPermissionsAsync","existingStatus","status","finalStatus","_yield$Notifications$2","requestPermissionsAsync","alert","getExpoPushTokenAsync","projectId","expoConfig","extra","eas","console","log","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","App","_useState","_useState2","_slicedToArray","setExpoPushToken","_useState3","_useState4","notification","setNotification","notificationListener","responseListener","then","current","addNotificationReceivedListener","addNotificationResponseReceivedListener","response","removeNotificationSubscription","style","flex","alignItems","justifyContent","children","fileName","_jsxFileName","lineNumber","columnNumber","request","content","onPress"],"sources":["C:/Users/NIR67/OneDrive/שולחן העבודה/SmokEye/src/Screens/PushNotification.jsx"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\r\nimport { Text, View, Button, Platform } from \"react-native\";\r\nimport * as Device from \"expo-device\";\r\nimport * as Notifications from \"expo-notifications\";\r\nimport Constants from \"expo-constants\";\r\n\r\nNotifications.setNotificationHandler({\r\n  handleNotification: async () => ({\r\n    shouldShowAlert: true,\r\n    shouldPlaySound: false,\r\n    shouldSetBadge: false,\r\n  }),\r\n});\r\n\r\n// Can use this function below or use Expo's Push Notification Tool from: https://expo.dev/notifications\r\nasync function sendPushNotification(expoPushToken) {\r\n  const message = {\r\n    to: expoPushToken,\r\n    sound: \"default\",\r\n    title: \"Original Title\",\r\n    body: \"And here is the body!\",\r\n    data: { someData: \"goes here\" },\r\n  };\r\n\r\n  await fetch(\"https://exp.host/--/api/v2/push/send\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Accept-encoding\": \"gzip, deflate\",\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(message),\r\n  });\r\n}\r\n\r\nasync function registerForPushNotificationsAsync() {\r\n  let token;\r\n  if (Device.isDevice) {\r\n    const { status: existingStatus } =\r\n      await Notifications.getPermissionsAsync();\r\n    let finalStatus = existingStatus;\r\n    if (existingStatus !== \"granted\") {\r\n      const { status } = await Notifications.requestPermissionsAsync();\r\n      finalStatus = status;\r\n    }\r\n    if (finalStatus !== \"granted\") {\r\n      alert(\"Failed to get push token for push notification!\");\r\n      return;\r\n    }\r\n    token = await Notifications.getExpoPushTokenAsync({\r\n      projectId: Constants.expoConfig.extra.eas.projectId,\r\n    });\r\n    console.log(token);\r\n  } else {\r\n    alert(\"Must use physical device for Push Notifications\");\r\n  }\r\n\r\n  if (Platform.OS === \"android\") {\r\n    Notifications.setNotificationChannelAsync(\"default\", {\r\n      name: \"default\",\r\n      importance: Notifications.AndroidImportance.MAX,\r\n      vibrationPattern: [0, 250, 250, 250],\r\n      lightColor: \"#FF231F7C\",\r\n    });\r\n  }\r\n\r\n  return token;\r\n}\r\n\r\nexport default function App() {\r\n  const [expoPushToken, setExpoPushToken] = useState(\"\");\r\n  const [notification, setNotification] = useState(false);\r\n  const notificationListener = useRef();\r\n  const responseListener = useRef();\r\n\r\n  useEffect(() => {\r\n    registerForPushNotificationsAsync().then((token) =>\r\n      setExpoPushToken(token)\r\n    );\r\n\r\n    notificationListener.current =\r\n      Notifications.addNotificationReceivedListener((notification) => {\r\n        setNotification(notification);\r\n      });\r\n\r\n    responseListener.current =\r\n      Notifications.addNotificationResponseReceivedListener((response) => {\r\n        console.log(response);\r\n      });\r\n\r\n    return () => {\r\n      Notifications.removeNotificationSubscription(\r\n        notificationListener.current\r\n      );\r\n      Notifications.removeNotificationSubscription(responseListener.current);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <View\r\n      style={{ flex: 1, alignItems: \"center\", justifyContent: \"space-around\" }}\r\n    >\r\n      <Text>Your expo push token: {expoPushToken.data}</Text>\r\n      <View style={{ alignItems: \"center\", justifyContent: \"center\" }}>\r\n        <Text>\r\n          Title: {notification && notification.request.content.title}{\" \"}\r\n        </Text>\r\n        <Text>Body: {notification && notification.request.content.body}</Text>\r\n        <Text>\r\n          Data:{\" \"}\r\n          {notification && JSON.stringify(notification.request.content.data)}\r\n        </Text>\r\n      </View>\r\n      <Button\r\n        title=\"Press to Send Notification\"\r\n        onPress={async () => {\r\n          await sendPushNotification(expoPushToken.data);\r\n        }}\r\n      />\r\n    </View>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}